#sidebar TableOfContents

== Setup the project ==

First we need to setup a Seam project with a few components in there. You can either build it from scratch and add what we'll discuss in a few lines, or download  [http://code.google.com/p/dhev/downloads/detail?name=DHEV-Tutorial.rar&can=2&q= this archive] which contains an eclipse project ready to be imported. The project contains these main things:
  * User bean: this is the model representing the User. It's a usual pojo decorated with JPA annotations for the persistence, and of course an @Name since we'll use it as a Seam component. For now our user has only a couple of fields, username and age:
{{{
//com.dhev.model.User.java
@Name("user")
@Entity
@Table(name = "USER")
public class User implements Serializable {

	@Id
	private String userName;

	@Column
	private Integer age;

        //getters and setters...

}
}}}
  * !UserManager class: contains a method to persist the user to the database. It simply calls persist on the entity manager, then return the "success" string (in the pages.xml file there will be a rule to manage that return):
{{{
//com.dhev.service.UserManagerImpl
@Name("userManager")
public class UserManagerImpl implements UserManager {

	@In(create = true)
	User user;

	@In
	protected EntityManager entityManager;

	public String registerUser() throws Exception {
		System.out.println("Registering user " + user.getUserName());

		entityManager.persist(user);

		return "success";
	}

}
}}}
  * register.xhtml: it's the main (and practically only) page of the application. It has a form where user's data can be entered, and a "Register" button which triggers the userManager's registerUser() method:
{{{
<!-- ... -->
      <h:messages globalOnly="true" infoClass="infoMessage"/>

      <f:view>
         <h:form id="registration">
         	<s:validateAll>
         	<h:panelGrid columns="3">
	            Username: <h:inputText id="username" value="#{user.userName}" required="true"/> <h:message for="username" errorClass="errorMessage" />
	            Age: <h:inputText id="age" value="#{user.age}" required="true"/> <h:message for="age" errorClass="errorMessage" />
		    <h:commandButton id="register" action="#{userManager.registerUser}" value="Register" />
            </h:panelGrid>
            </s:validateAll>
         </h:form>         
      </f:view>
<!-- ... -->
}}}
  * pages.xml: defines the navigation rules of your application. When "success" is returned from the userManager, then redirect to the same page adding a confirmation message (here we specify just the key of the message, the content is then taken from the messages.properties file)
{{{
<!-- ... -->
        <page view-id="/register.xhtml" login-required="false">
		<navigation>
			<rule if-outcome="success">
				<redirect view-id="/register.xhtml">
					<message severity="info">#{messages['userRegistered']}</message>
				</redirect>
			</rule>
		</navigation>
	</page>
<!-- ... -->
}}}
  * messages.properties: may contain the labels for the internationalization, error messages, etc. We'll use it as a place where to put our messages
{{{
#...
userRegistered=New user has been successfully registered, yeah!
#...
}}}
  * dhev-ds.xml: the datasource, pointing to an in-memory instance of hsqldb
{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE datasources
    PUBLIC "-//JBoss//DTD JBOSS JCA Config 1.5//EN"
    "http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd">
<datasources>
	<local-tx-datasource>
		<jndi-name>dhevDatasource</jndi-name>
		<use-java-context>true</use-java-context>
		<connection-url>jdbc:hsqldb:mem:test</connection-url>
		<driver-class>org.hsqldb.jdbcDriver</driver-class>
		<user-name>sa</user-name>
		<password></password>
	</local-tx-datasource>
</datasources>
}}}
  * persistence.xml: to configure JPA in order to use the in-memory db and to initialize it when the application starts
{{{
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
	version="1.0">
	<persistence-unit name="dhev-Tutorial-Database"
		transaction-type="JTA">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<jta-data-source>java:/dhevDatasource</jta-data-source>
		<properties>
			<property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
			<property name="hibernate.hbm2ddl.auto" value="create-drop"/>
			<property name="hibernate.show_sql" value="true" />
			<property name="jboss.entity.manager.factory.jndi.name" value="java:/dhevEntityManagerFactory" />
		</properties>
	</persistence-unit>
</persistence>
}}}
  * build.xml and build.properties: they're respectively the ant build file, and some configurations for that. The task you want to use is the "deploy", which creates the ear of the application and copies it with the datasource to the jboss installation specified in the build.properties